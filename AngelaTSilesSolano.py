import os             # Importamos el m√≥dulo os para trabajar con archivos y rutas.
from ClasePelicula import Pelicula          # Importamos la clase Pelicula desde el archivo ClasePelicula.py. 

class CatalogoPelicula:    # Definimos la clase CatalogoPelicula que gestiona una lista de pel√≠culas y sus operaciones.

    def __init__(self, nombre, ruta_archivo):     # Constructor de la clase: inicializa el nombre del cat√°logo, la ruta del archivo y carga las pel√≠culas existentes.
        self.nombre = nombre        # Nombre del cat√°logo.
        self.ruta_archivo = ruta_archivo    # Ruta del archivo donde se guardan las pel√≠culas.
        self.peliculas = []               # Lista para almacenar objetos de tipo Pelicula.
        self.cargar_peliculas()    # Carga las pel√≠culas desde el archivo al iniciar el cat√°logo.

    def agregar(self, pelicula):    # M√©todo para agregar una pel√≠cula al cat√°logo.
     if self.buscar_pelicula(pelicula.id):    # Si ya existe una pel√≠cula con el mismo ID, no se agrega y retorna el siguiente mensaje.
        print(f"‚úï  Ya existe una pel√≠cula con el ID {pelicula.id}. No se puede agregar.")
        return
     self.peliculas.append(pelicula)       # Se agrega la pel√≠cula a la lista.
     self.guardar_datos()               # Se actualiza el archivo con los nuevos datos.
     print(f"Pel√≠cula con ID {pelicula.id} agregada correctamente.")  

    def listar(self):      # M√©todo para listar todas las pel√≠culas en el cat√°logo.
        if not self.peliculas:
            print("El cat√°logo est√° vac√≠o.")     # Si la lista est√° vac√≠a, se retorna el siguiente mensaje.
        else:
            for pelicula in self.peliculas:       # Se recorren las pel√≠culas y se imprime.
                print(pelicula)

    def eliminar(self):  # M√©todo para eliminar el cat√°logo de pel√≠culas.
        self.peliculas = []  # Se vac√≠a la lista.
        try:
            os.remove(self.ruta_archivo)        # Se intenta eliminar el archivo del cat√°logo e imprime el mensaje.
            print("Cat√°logo eliminado correctamente.")
        except FileNotFoundError:           # Pero si el archivo no existe muestra este otro mensaje.
            print("El archivo no existe.")

    def buscar_pelicula(self, id):       # M√©todo para buscar una pel√≠cula por su ID.
        return next((p for p in self.peliculas if p.id == id), None)     # Retorna la pel√≠cula si existe, de lo contrario 'None'.

    def guardar_datos(self): 
        try:
            with open(self.ruta_archivo, 'w', encoding='utf-8') as f: 
                for pelicula in self.peliculas:
                    f.write(f"{pelicula.id},{pelicula.titulo},{pelicula.duracion},{pelicula.genero}\n")
        except Exception as e:
            print(f"‚úï  Error al guardar datos: {e}")

    def cargar_peliculas(self):
        if not os.path.exists(self.ruta_archivo):
            open(self.ruta_archivo, 'w', encoding='utf-8').close()      
            return
        try:
            with open(self.ruta_archivo, 'r', encoding='utf-8') as f:     
                for linea in f:
                    datos = linea.strip().split(',')
                    if len(datos) == 4:
                        try:
                            id = int(datos[0])
                            titulo = datos[1]
                            duracion = int(datos[2])
                            genero = datos[3]
                            self.peliculas.append(Pelicula(id, titulo, duracion, genero))
                        except ValueError:
                            print(f"‚úï  Error en los datos: {linea.strip()}")
        except Exception as e:
            print(f"‚úï  Los datos no se pueden cargar: {e}")

def iniciar_programa():               
    archivo = input("Ingrese el nombre del cat√°logo de pel√≠culas: ")
    if not archivo.endswith(".txt"):
        archivo += ".txt"

    if not os.path.exists(archivo):        
       print(f" ‚Üí  El cat√°logo {archivo} no exist√≠a y ha sido creado.")
    else:
       print(f" ‚Üí  El cat√°logo {archivo} ya existe.")

    catalogo = CatalogoPelicula("Mi Cat√°logo", archivo)
    menu(catalogo)

def menu(catalogo): 
    while True:
        print("\nMen√∫ de opciones:")
        print("1 ‚Üí  Agregar pel√≠cula.")
        print("2 ‚Üí  Listar pel√≠culas.")
        print("3 ‚Üí  Eliminar cat√°logo de pel√≠culas.")
        print("4 ‚Üí  Salir.")
        opcion = input("Opci√≥n a elegir: ")

        if opcion == "1":
            try:
                print("\n  üîπ Por favor, ingrese:")
                id = int(input(" ‚Üí  ID de la pel√≠cula: "))
                titulo = input(" ‚Üí  T√≠tulo de la pel√≠cula: ")
                duracion = int(input(" ‚Üí  Duraci√≥n (en min): "))
                genero = input(" ‚Üí  G√©nero: ")
                pelicula = Pelicula(id, titulo, duracion, genero)
                catalogo.agregar(pelicula)
            except ValueError:
                print("‚úï  Ingrese solo N√öMEROS para ID y la duraci√≥n.")

        elif opcion == "2":
            print("\nListado del cat√°logo de pel√≠culas:")
            catalogo.listar()

        elif opcion == "3":
            confirmar = input("¬øEst√° seguro de eliminar el cat√°logo? ‚Üí (S/N): ").strip().lower()
            if confirmar == "s":
                catalogo.eliminar()
            elif confirmar == "n":
                menu (catalogo)
            else:
                print("‚úï  Ingrese 's' o 'n' para validar la respuesta.")

        elif opcion == "4":
            print("\nEl programa finaliz√≥. ¬°Nos vemos pronto!üòÑ")
            break
        else:
            print("‚úï  Incorrecto, agregue una opci√≥n entre 1 - 4.")

print("‚Äî" * 70)
print("      üé¨      ¬°Bienvenido a nuestro Cat√°logo de Pel√≠culas!      üé•      ")
print("‚Äî" * 70)
iniciar_programa()